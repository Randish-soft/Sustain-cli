{"version":3,"sources":["../src/index.ts","../src/collectors/docker_resources.ts"],"sourcesContent":["export function placeholder() { return \"Hello, Sustain\"; }\nexport * from \"./collectors/docker_resources\"","import { exec } from 'child_process';\nimport { promisify } from 'util';\n\nconst execAsync = promisify(exec);\n\nexport interface DockerContainer {\n  id: string;\n  name: string;\n  cpu?: string;\n  memory?: string;\n  status: string;\n}\n\nexport interface DockerResources {\n  containers: DockerContainer[];\n  timestamp: string;\n}\n\nexport class DockerResourceCollector {\n  async collect(): Promise<DockerResources> {\n    try {\n      // Check if Docker is running\n      await execAsync('docker info');\n      \n      // Get container list\n      const { stdout: containerList } = await execAsync('docker ps --format \"{{.ID}}|{{.Names}}|{{.Status}}\"');\n      \n      if (!containerList.trim()) {\n        return {\n          containers: [],\n          timestamp: new Date().toISOString()\n        };\n      }\n      \n      const containers: DockerContainer[] = [];\n      const lines = containerList.trim().split('\\n');\n      \n      for (const line of lines) {\n        const [id, name, status] = line.split('|');\n        \n        try {\n          // Get container stats (CPU and Memory)\n          const { stdout: stats } = await execAsync(\n            `docker stats ${id} --no-stream --format \"{{.CPUPerc}}|{{.MemUsage}}\"`\n          );\n          \n          const [cpu, memory] = stats.trim().split('|');\n          \n          containers.push({\n            id,\n            name,\n            cpu,\n            memory,\n            status\n          });\n        } catch (error) {\n          // If stats fail, still include the container\n          containers.push({\n            id,\n            name,\n            status,\n            cpu: 'N/A',\n            memory: 'N/A'\n          });\n        }\n      }\n      \n      return {\n        containers,\n        timestamp: new Date().toISOString()\n      };\n      \n    } catch (error) {\n      // Docker not running or not installed\n      console.error('Docker error:', error);\n      return {\n        containers: [],\n        timestamp: new Date().toISOString()\n      };\n    }\n  }\n  \n  async getContainerDetails(containerId: string): Promise<DockerContainer | null> {\n    try {\n      const { stdout: details } = await execAsync(\n        `docker inspect ${containerId} --format \"{{.Name}}|{{.State.Status}}\"`\n      );\n      \n      const [name, status] = details.trim().split('|');\n      \n      const { stdout: stats } = await execAsync(\n        `docker stats ${containerId} --no-stream --format \"{{.CPUPerc}}|{{.MemUsage}}\"`\n      );\n      \n      const [cpu, memory] = stats.trim().split('|');\n      \n      return {\n        id: containerId,\n        name: name.replace(/^\\//, ''), // Remove leading slash\n        cpu,\n        memory,\n        status\n      };\n    } catch (error) {\n      return null;\n    }\n  }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,2BAAqB;AACrB,kBAA0B;AAE1B,IAAM,gBAAY,uBAAU,yBAAI;AAezB,IAAM,0BAAN,MAA8B;AAAA,EACnC,MAAM,UAAoC;AACxC,QAAI;AAEF,YAAM,UAAU,aAAa;AAG7B,YAAM,EAAE,QAAQ,cAAc,IAAI,MAAM,UAAU,qDAAqD;AAEvG,UAAI,CAAC,cAAc,KAAK,GAAG;AACzB,eAAO;AAAA,UACL,YAAY,CAAC;AAAA,UACb,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,QACpC;AAAA,MACF;AAEA,YAAM,aAAgC,CAAC;AACvC,YAAM,QAAQ,cAAc,KAAK,EAAE,MAAM,IAAI;AAE7C,iBAAW,QAAQ,OAAO;AACxB,cAAM,CAAC,IAAI,MAAM,MAAM,IAAI,KAAK,MAAM,GAAG;AAEzC,YAAI;AAEF,gBAAM,EAAE,QAAQ,MAAM,IAAI,MAAM;AAAA,YAC9B,gBAAgB,EAAE;AAAA,UACpB;AAEA,gBAAM,CAAC,KAAK,MAAM,IAAI,MAAM,KAAK,EAAE,MAAM,GAAG;AAE5C,qBAAW,KAAK;AAAA,YACd;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACF,CAAC;AAAA,QACH,SAAS,OAAO;AAEd,qBAAW,KAAK;AAAA,YACd;AAAA,YACA;AAAA,YACA;AAAA,YACA,KAAK;AAAA,YACL,QAAQ;AAAA,UACV,CAAC;AAAA,QACH;AAAA,MACF;AAEA,aAAO;AAAA,QACL;AAAA,QACA,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,MACpC;AAAA,IAEF,SAAS,OAAO;AAEd,cAAQ,MAAM,iBAAiB,KAAK;AACpC,aAAO;AAAA,QACL,YAAY,CAAC;AAAA,QACb,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,MACpC;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAM,oBAAoB,aAAsD;AAC9E,QAAI;AACF,YAAM,EAAE,QAAQ,QAAQ,IAAI,MAAM;AAAA,QAChC,kBAAkB,WAAW;AAAA,MAC/B;AAEA,YAAM,CAAC,MAAM,MAAM,IAAI,QAAQ,KAAK,EAAE,MAAM,GAAG;AAE/C,YAAM,EAAE,QAAQ,MAAM,IAAI,MAAM;AAAA,QAC9B,gBAAgB,WAAW;AAAA,MAC7B;AAEA,YAAM,CAAC,KAAK,MAAM,IAAI,MAAM,KAAK,EAAE,MAAM,GAAG;AAE5C,aAAO;AAAA,QACL,IAAI;AAAA,QACJ,MAAM,KAAK,QAAQ,OAAO,EAAE;AAAA;AAAA,QAC5B;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF,SAAS,OAAO;AACd,aAAO;AAAA,IACT;AAAA,EACF;AACF;;;AD3GO,SAAS,cAAc;AAAE,SAAO;AAAkB;","names":[]}
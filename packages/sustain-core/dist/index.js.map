{"version":3,"sources":["../src/index.ts","../src/collectors/docker_resources.ts","../src/collectors/compose_analyzer.ts"],"sourcesContent":["export function placeholder() { return \"Hello, Sustain\"; }\nexport * from \"./collectors/docker_resources\";\nexport * from \"./collectors/compose_analyzer\";\n","import { exec } from 'child_process';\nimport { promisify } from 'util';\n\nconst execAsync = promisify(exec);\n\nexport interface DockerContainer {\n  id: string;\n  name: string;\n  cpu?: string;\n  memory?: string;\n  status: string;\n}\n\nexport interface DockerResources {\n  containers: DockerContainer[];\n  timestamp: string;\n}\n\nexport class DockerResourceCollector {\n  async collect(): Promise<DockerResources> {\n    try {\n      // Check if Docker is running\n      await execAsync('docker info');\n      \n      // Get container list\n      const { stdout: containerList } = await execAsync('docker ps --format \"{{.ID}}|{{.Names}}|{{.Status}}\"');\n      \n      if (!containerList.trim()) {\n        return {\n          containers: [],\n          timestamp: new Date().toISOString()\n        };\n      }\n      \n      const containers: DockerContainer[] = [];\n      const lines = containerList.trim().split('\\n');\n      \n      for (const line of lines) {\n        const [id, name, status] = line.split('|');\n        \n        try {\n          // Get container stats (CPU and Memory)\n          const { stdout: stats } = await execAsync(\n            `docker stats ${id} --no-stream --format \"{{.CPUPerc}}|{{.MemUsage}}\"`\n          );\n          \n          const [cpu, memory] = stats.trim().split('|');\n          \n          containers.push({\n            id,\n            name,\n            cpu,\n            memory,\n            status\n          });\n        } catch (error) {\n          // If stats fail, still include the container\n          containers.push({\n            id,\n            name,\n            status,\n            cpu: 'N/A',\n            memory: 'N/A'\n          });\n        }\n      }\n      \n      return {\n        containers,\n        timestamp: new Date().toISOString()\n      };\n      \n    } catch (error) {\n      // Docker not running or not installed\n      console.error('Docker error:', error);\n      return {\n        containers: [],\n        timestamp: new Date().toISOString()\n      };\n    }\n  }\n  \n  async getContainerDetails(containerId: string): Promise<DockerContainer | null> {\n    try {\n      const { stdout: details } = await execAsync(\n        `docker inspect ${containerId} --format \"{{.Name}}|{{.State.Status}}\"`\n      );\n      \n      const [name, status] = details.trim().split('|');\n      \n      const { stdout: stats } = await execAsync(\n        `docker stats ${containerId} --no-stream --format \"{{.CPUPerc}}|{{.MemUsage}}\"`\n      );\n      \n      const [cpu, memory] = stats.trim().split('|');\n      \n      return {\n        id: containerId,\n        name: name.replace(/^\\//, ''), // Remove leading slash\n        cpu,\n        memory,\n        status\n      };\n    } catch (error) {\n      return null;\n    }\n  }\n}","import { promises as fs } from 'fs';\nimport { join, resolve } from 'path';\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\n\nconst execAsync = promisify(exec);\n\n// Simple YAML parser for docker-compose files\nfunction parseSimpleYaml(content: string): any {\n  // This is a very basic YAML parser for docker-compose files\n  // In production, you'd want to use js-yaml\n  const lines = content.split('\\n');\n  const result: any = { services: {} };\n  let currentService: string | null = null;\n  let currentIndent = 0;\n  \n  for (const line of lines) {\n    const trimmed = line.trim();\n    if (!trimmed || trimmed.startsWith('#')) continue;\n    \n    const indent = line.length - line.trimStart().length;\n    \n    if (trimmed === 'services:') {\n      currentIndent = indent;\n      continue;\n    }\n    \n    if (indent === currentIndent + 2 && !trimmed.includes(':')) continue;\n    \n    if (indent === currentIndent + 2 && trimmed.endsWith(':')) {\n      currentService = trimmed.slice(0, -1);\n      result.services[currentService] = {};\n    } else if (currentService && indent === currentIndent + 4) {\n      const [key, ...valueParts] = trimmed.split(':');\n      const value = valueParts.join(':').trim();\n      result.services[currentService][key] = value;\n    }\n  }\n  \n  return result;\n}\n\nexport interface ComposeService {\n  name: string;\n  image?: string;\n  build?: string;\n  estimatedSize: string;\n  estimatedMemory: string;\n  estimatedCPU: string;\n  replicas: number;\n  resourceLimits?: {\n    cpus?: string;\n    memory?: string;\n  };\n}\n\nexport interface ComposeAnalysis {\n  composeFile: string;\n  services: ComposeService[];\n  totalEstimatedSize: string;\n  totalEstimatedMemory: string;\n  totalEstimatedCPU: string;\n  sustainabilityScore: number;\n  recommendations: string[];\n}\n\nexport class ComposeAnalyzer {\n  private projectPath: string;\n  \n  // Base image size estimates (in MB)\n  private readonly imageEstimates: Record<string, { size: number; memory: number; cpu: number }> = {\n    'alpine': { size: 5, memory: 4, cpu: 0.1 },\n    'busybox': { size: 1, memory: 2, cpu: 0.05 },\n    'ubuntu': { size: 77, memory: 64, cpu: 0.2 },\n    'debian': { size: 124, memory: 64, cpu: 0.2 },\n    'centos': { size: 204, memory: 128, cpu: 0.3 },\n    'node': { size: 900, memory: 512, cpu: 0.5 },\n    'node:alpine': { size: 110, memory: 256, cpu: 0.3 },\n    'python': { size: 885, memory: 512, cpu: 0.5 },\n    'python:alpine': { size: 45, memory: 128, cpu: 0.2 },\n    'nginx': { size: 142, memory: 128, cpu: 0.2 },\n    'nginx:alpine': { size: 23, memory: 64, cpu: 0.1 },\n    'redis': { size: 117, memory: 256, cpu: 0.3 },\n    'redis:alpine': { size: 32, memory: 128, cpu: 0.2 },\n    'postgres': { size: 379, memory: 512, cpu: 0.5 },\n    'postgres:alpine': { size: 160, memory: 256, cpu: 0.4 },\n    'mysql': { size: 544, memory: 512, cpu: 0.5 },\n    'mongo': { size: 493, memory: 1024, cpu: 0.6 },\n    'rabbitmq': { size: 220, memory: 512, cpu: 0.4 },\n    'elasticsearch': { size: 774, memory: 2048, cpu: 1.0 },\n    'default': { size: 500, memory: 512, cpu: 0.5 }\n  };\n\n  constructor(projectPath?: string) {\n    // Use current working directory if no path provided\n    this.projectPath = projectPath || process.cwd();\n  }\n\n  async analyze(): Promise<ComposeAnalysis[]> {\n    console.log(`Searching for Docker Compose files in: ${this.projectPath}`);\n    const composeFiles = await this.findComposeFilesRecursive();\n    const analyses: ComposeAnalysis[] = [];\n\n    for (const composeFile of composeFiles) {\n      const analysis = await this.analyzeComposeFile(composeFile);\n      analyses.push(analysis);\n    }\n\n    return analyses;\n  }\n\n  private async findComposeFilesRecursive(dir: string = this.projectPath): Promise<string[]> {\n    const composeFiles: string[] = [];\n    const possibleNames = [\n      'docker-compose.yml',\n      'docker-compose.yaml',\n      'compose.yml',\n      'compose.yaml',\n      'docker-compose.dev.yml',\n      'docker-compose.prod.yml',\n      'docker-compose.override.yml'\n    ];\n\n    // Directories to skip\n    const skipDirs = ['node_modules', '.git', 'dist', 'build', '.next', 'coverage', 'vendor'];\n\n    async function scanDirectory(currentDir: string, basePath: string): Promise<void> {\n      try {\n        const entries = await fs.readdir(currentDir, { withFileTypes: true });\n        \n        for (const entry of entries) {\n          const fullPath = join(currentDir, entry.name);\n          \n          if (entry.isDirectory()) {\n            // Skip certain directories\n            if (!skipDirs.includes(entry.name)) {\n              await scanDirectory(fullPath, basePath);\n            }\n          } else if (entry.isFile() && possibleNames.includes(entry.name)) {\n            // Store relative path from project root\n            const relativePath = fullPath.substring(basePath.length + 1);\n            composeFiles.push(relativePath);\n            console.log(`Found docker-compose file: ${relativePath}`);\n          }\n        }\n      } catch (error) {\n        // Ignore permission errors and continue\n      }\n    }\n\n    await scanDirectory(dir, this.projectPath);\n    \n    // Also check if we're in a subdirectory and should scan upwards\n    if (composeFiles.length === 0) {\n      // Try to find project root (look for package.json, .git, etc.)\n      const projectRoot = await this.findProjectRoot();\n      if (projectRoot && projectRoot !== this.projectPath) {\n        this.projectPath = projectRoot;\n        await scanDirectory(projectRoot, projectRoot);\n      }\n    }\n\n    return composeFiles;\n  }\n\n  private async findProjectRoot(startPath: string = this.projectPath): Promise<string | null> {\n    let currentPath = resolve(startPath);\n    const indicators = ['package.json', '.git', 'pnpm-workspace.yaml', '.gitignore'];\n    \n    // Keep going up until we find a project root indicator\n    while (currentPath !== '/' && currentPath !== resolve(currentPath, '..')) {\n      for (const indicator of indicators) {\n        try {\n          await fs.access(join(currentPath, indicator));\n          console.log(`Found project root at: ${currentPath}`);\n          return currentPath;\n        } catch {}\n      }\n      \n      // Move up one directory\n      currentPath = resolve(currentPath, '..');\n    }\n    \n    return null;\n  }\n\n  private async analyzeComposeFile(filename: string): Promise<ComposeAnalysis> {\n    const filePath = filename.startsWith('/') ? filename : join(this.projectPath, filename);\n    const content = await fs.readFile(filePath, 'utf8');\n    \n    // Use simple parser for now\n    // In production, you would import js-yaml at the top of the file\n    const compose = parseSimpleYaml(content);\n\n    const services: ComposeService[] = [];\n    let totalSize = 0;\n    let totalMemory = 0;\n    let totalCPU = 0;\n\n    if (compose.services) {\n      for (const [serviceName, serviceConfig] of Object.entries(compose.services)) {\n        const service = await this.analyzeService(serviceName, serviceConfig as any);\n        services.push(service);\n        \n        // Parse sizes to calculate totals\n        totalSize += parseFloat(service.estimatedSize);\n        totalMemory += parseFloat(service.estimatedMemory);\n        totalCPU += parseFloat(service.estimatedCPU);\n      }\n    }\n\n    const recommendations = this.generateRecommendations(services);\n    const sustainabilityScore = this.calculateSustainabilityScore(services);\n\n    return {\n      composeFile: filename,\n      services,\n      totalEstimatedSize: `${totalSize.toFixed(1)} MB`,\n      totalEstimatedMemory: `${totalMemory.toFixed(0)} MB`,\n      totalEstimatedCPU: `${totalCPU.toFixed(2)} cores`,\n      sustainabilityScore,\n      recommendations\n    };\n  }\n\n  private async analyzeService(name: string, config: any): Promise<ComposeService> {\n    let estimates = this.imageEstimates.default;\n    \n    if (config.image) {\n      // Try to match image with our estimates\n      const imageName = config.image.split(':')[0];\n      const imageTag = config.image.includes(':') ? config.image : `${config.image}:latest`;\n      \n      // Find best match\n      for (const [key, value] of Object.entries(this.imageEstimates)) {\n        if (imageTag.includes(key)) {\n          estimates = value;\n          break;\n        }\n      }\n\n      // Check if we can get actual image size from Docker\n      try {\n        const { stdout } = await execAsync(`docker images ${config.image} --format \"{{.Size}}\"`);\n        if (stdout.trim()) {\n          // Parse Docker size (e.g., \"142MB\" -> 142)\n          const sizeMatch = stdout.trim().match(/(\\d+\\.?\\d*)\\s*(MB|GB|KB)/i);\n          if (sizeMatch) {\n            let size = parseFloat(sizeMatch[1]);\n            if (sizeMatch[2].toUpperCase() === 'GB') size *= 1024;\n            if (sizeMatch[2].toUpperCase() === 'KB') size /= 1024;\n            estimates = { ...estimates, size };\n          }\n        }\n      } catch {\n        // Image not pulled locally, use estimate\n      }\n    }\n\n    // Check for resource limits in deploy section\n    let resourceLimits;\n    if (config.deploy?.resources?.limits) {\n      resourceLimits = {\n        cpus: config.deploy.resources.limits.cpus,\n        memory: config.deploy.resources.limits.memory\n      };\n    }\n\n    // Calculate replicas\n    const replicas = config.deploy?.replicas || 1;\n\n    // Apply replica multiplier\n    const finalSize = estimates.size; // Size doesn't multiply with replicas\n    const finalMemory = estimates.memory * replicas;\n    const finalCPU = estimates.cpu * replicas;\n\n    return {\n      name,\n      image: config.image,\n      build: config.build?.context || config.build,\n      estimatedSize: `${finalSize} MB`,\n      estimatedMemory: `${finalMemory} MB`,\n      estimatedCPU: `${finalCPU}`,\n      replicas,\n      resourceLimits\n    };\n  }\n\n  private generateRecommendations(services: ComposeService[]): string[] {\n    const recommendations: string[] = [];\n\n    for (const service of services) {\n      // Check for Alpine variants\n      if (service.image && !service.image.includes('alpine') && !service.image.includes('slim')) {\n        const hasAlpineVariant = ['node', 'python', 'nginx', 'redis', 'postgres'].some(\n          img => service.image?.includes(img)\n        );\n        if (hasAlpineVariant) {\n          recommendations.push(\n            `Consider using Alpine variant for ${service.name} to reduce size by ~80%`\n          );\n        }\n      }\n\n      // Check for missing resource limits\n      if (!service.resourceLimits) {\n        recommendations.push(\n          `Set resource limits for ${service.name} to prevent overconsumption`\n        );\n      }\n\n      // Check for high memory services\n      const memory = parseFloat(service.estimatedMemory);\n      if (memory > 1024) {\n        recommendations.push(\n          `Service ${service.name} uses high memory (${service.estimatedMemory}). Consider optimization.`\n        );\n      }\n    }\n\n    // General recommendations\n    if (services.length > 5) {\n      recommendations.push(\n        'Consider consolidating services where possible to reduce overhead'\n      );\n    }\n\n    return recommendations;\n  }\n\n  private calculateSustainabilityScore(services: ComposeService[]): number {\n    let score = 100;\n\n    for (const service of services) {\n      // Penalize large images\n      const size = parseFloat(service.estimatedSize);\n      if (size > 500) score -= 5;\n      if (size > 1000) score -= 10;\n\n      // Reward Alpine/slim variants\n      if (service.image?.includes('alpine') || service.image?.includes('slim')) {\n        score += 5;\n      }\n\n      // Reward resource limits\n      if (service.resourceLimits) {\n        score += 3;\n      }\n\n      // Penalize high memory usage\n      const memory = parseFloat(service.estimatedMemory);\n      if (memory > 2048) score -= 10;\n    }\n\n    return Math.max(0, Math.min(100, score));\n  }\n}"],"mappings":"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","names":["import_child_process","import_util","execAsync","fs"]}
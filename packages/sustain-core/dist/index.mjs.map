{"version":3,"sources":["../src/simulation/kwh.ts","../src/collectors/docker_resources.ts","../src/collectors/compose_analyzer.ts","../src/analyzers/project_analyzer.ts"],"sourcesContent":["// src/simulation/kwh.ts\n//--------------------------------------------------------------\n//  ❖  Sustain-CLI  ‣  kWh Simulation module\n//--------------------------------------------------------------\nimport * as path from 'node:path';\nimport { readFile } from 'node:fs/promises';\n\n/* ============================================================\n *  Types\n * ========================================================== */\nexport type ScopeKind = 'website' | 'ai' | 'gaming' | 'custom';\n\nexport interface BaseScope {\n  kind: ScopeKind;\n  name: string;\n}\n\nexport interface WebsiteScope extends BaseScope {\n  kind: 'website';\n  serverWattage: number;   // W\n  hoursOnline: number;     // h / month\n  pageViews: number;       // per month\n  osShare?: { windows?: number; macos?: number; linux?: number };\n}\n\nexport interface AIScope extends BaseScope {\n  kind: 'ai';\n  boardWattage: number;    // W\n  trainingHours: number;   // h / month\n  inferenceHours: number;  // h / month\n}\n\nexport interface GamingScope extends BaseScope {\n  kind: 'gaming';\n  serverWattage: number;   // W\n  concurrentPlayers: number;\n  hoursOnline: number;     // h / month\n}\n\nexport interface CustomScope extends BaseScope {\n  kind: 'custom';\n  // Add optional custom fields here if needed\n}\n\nexport type ScopeInput = WebsiteScope | AIScope | GamingScope | CustomScope;\n\nexport interface SimulationResult {\n  scope: ScopeInput;\n  kWhTotal: number;\n  breakdown: Record<string, number>;\n}\n\n/* ============================================================\n *  Public API\n * ========================================================== */\nexport function simulate(scope: ScopeInput): SimulationResult {\n  switch (scope.kind) {\n    case 'website':\n      return simulateWebsite(scope);\n    case 'ai':\n      return simulateAI(scope);\n    case 'gaming':\n      return simulateGaming(scope);\n    case 'custom':\n    default:\n      return { scope, kWhTotal: 0, breakdown: {} };\n  }\n}\n\nexport async function simulateFromCache(\n  cacheFile = path.join(process.cwd(), '.sustain', 'scope-cache.json'),\n): Promise<SimulationResult[]> {\n  const raw = await readFile(cacheFile, 'utf8');\n  const scopes: ScopeInput[] = JSON.parse(raw);\n  return scopes.map(simulate);\n}\n\n/* ============================================================\n *  Internal calculators\n * ========================================================== */\n// ---------- 1. Website --------------------------------------\nfunction simulateWebsite(scope: WebsiteScope): SimulationResult {\n  const serverKWh = (scope.serverWattage * scope.hoursOnline) / 1_000;\n\n  const PAGE_KWH_DESKTOP = {\n    windows: 0.00055,\n    macos:   0.00042,\n    linux:   0.00060,\n    other:   0.00048,\n  };\n  const share = {\n    windows: scope.osShare?.windows ?? 0.65,\n    macos:   scope.osShare?.macos   ?? 0.25,\n    linux:   scope.osShare?.linux   ?? 0.10,\n  };\n  const otherShare = 1 - share.windows - share.macos - share.linux;\n\n  const userKWh =\n    scope.pageViews *\n    (share.windows * PAGE_KWH_DESKTOP.windows +\n      share.macos   * PAGE_KWH_DESKTOP.macos   +\n      share.linux   * PAGE_KWH_DESKTOP.linux   +\n      otherShare    * PAGE_KWH_DESKTOP.other);\n\n  return buildResult(scope, { server: serverKWh, users: userKWh });\n}\n\n// ---------- 2. AI -------------------------------------------\nfunction simulateAI(scope: AIScope): SimulationResult {\n  const TRAIN_UTIL = 0.9;\n  const INF_UTIL   = 0.35;\n\n  const trainingKWh  = (scope.boardWattage * TRAIN_UTIL * scope.trainingHours)  / 1_000;\n  const inferenceKWh = (scope.boardWattage * INF_UTIL   * scope.inferenceHours) / 1_000;\n\n  return buildResult(scope, { training: trainingKWh, inference: inferenceKWh });\n}\n\n// ---------- 3. Gaming ---------------------------------------\nfunction simulateGaming(scope: GamingScope): SimulationResult {\n  const PUE = 1.3;\n  const serverKWh = (scope.serverWattage * scope.hoursOnline * PUE) / 1_000;\n\n  return buildResult(scope, { server: serverKWh });\n}\n\n/* ============================================================\n *  Helpers\n * ========================================================== */\nfunction round(v: number, d = 3) {\n  return Number(v.toFixed(d));\n}\n\nfunction buildResult(\n  scope: ScopeInput,\n  breakdown: Record<string, number>,\n): SimulationResult {\n  const rounded = Object.fromEntries(\n    Object.entries(breakdown).map(([k, v]) => [k, round(v)]),\n  ) as Record<string, number>;\n  return {\n    scope,\n    kWhTotal: round(Object.values(rounded).reduce((a, b) => a + b, 0)),\n    breakdown: rounded,\n  };\n}\n","import { exec } from 'child_process';\nimport { promisify } from 'util';\n\nconst execAsync = promisify(exec);\n\nexport interface DockerContainer {\n  id: string;\n  name: string;\n  cpu?: string;\n  memory?: string;\n  status: string;\n}\n\nexport interface DockerResources {\n  containers: DockerContainer[];\n  timestamp: string;\n}\n\nexport class DockerResourceCollector {\n  async collect(): Promise<DockerResources> {\n    try {\n      // Check if Docker is running\n      await execAsync('docker info');\n      \n      // Get container list\n      const { stdout: containerList } = await execAsync('docker ps --format \"{{.ID}}|{{.Names}}|{{.Status}}\"');\n      \n      if (!containerList.trim()) {\n        return {\n          containers: [],\n          timestamp: new Date().toISOString()\n        };\n      }\n      \n      const containers: DockerContainer[] = [];\n      const lines = containerList.trim().split('\\n');\n      \n      for (const line of lines) {\n        const [id, name, status] = line.split('|');\n        \n        try {\n          // Get container stats (CPU and Memory)\n          const { stdout: stats } = await execAsync(\n            `docker stats ${id} --no-stream --format \"{{.CPUPerc}}|{{.MemUsage}}\"`\n          );\n          \n          const [cpu, memory] = stats.trim().split('|');\n          \n          containers.push({\n            id,\n            name,\n            cpu,\n            memory,\n            status\n          });\n        } catch (error) {\n          // If stats fail, still include the container\n          containers.push({\n            id,\n            name,\n            status,\n            cpu: 'N/A',\n            memory: 'N/A'\n          });\n        }\n      }\n      \n      return {\n        containers,\n        timestamp: new Date().toISOString()\n      };\n      \n    } catch (error) {\n      // Docker not running or not installed\n      console.error('Docker error:', error);\n      return {\n        containers: [],\n        timestamp: new Date().toISOString()\n      };\n    }\n  }\n  \n  async getContainerDetails(containerId: string): Promise<DockerContainer | null> {\n    try {\n      const { stdout: details } = await execAsync(\n        `docker inspect ${containerId} --format \"{{.Name}}|{{.State.Status}}\"`\n      );\n      \n      const [name, status] = details.trim().split('|');\n      \n      const { stdout: stats } = await execAsync(\n        `docker stats ${containerId} --no-stream --format \"{{.CPUPerc}}|{{.MemUsage}}\"`\n      );\n      \n      const [cpu, memory] = stats.trim().split('|');\n      \n      return {\n        id: containerId,\n        name: name.replace(/^\\//, ''), // Remove leading slash\n        cpu,\n        memory,\n        status\n      };\n    } catch (error) {\n      return null;\n    }\n  }\n}","import { promises as fs } from 'fs';\nimport { join, resolve } from 'path';\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\n\nconst execAsync = promisify(exec);\n\n// Simple YAML parser for docker-compose files\nfunction parseSimpleYaml(content: string): any {\n  // This is a very basic YAML parser for docker-compose files\n  // In production, you'd want to use js-yaml\n  const lines = content.split('\\n');\n  const result: any = { services: {} };\n  let currentService: string | null = null;\n  let currentIndent = 0;\n  \n  for (const line of lines) {\n    const trimmed = line.trim();\n    if (!trimmed || trimmed.startsWith('#')) continue;\n    \n    const indent = line.length - line.trimStart().length;\n    \n    if (trimmed === 'services:') {\n      currentIndent = indent;\n      continue;\n    }\n    \n    if (indent === currentIndent + 2 && !trimmed.includes(':')) continue;\n    \n    if (indent === currentIndent + 2 && trimmed.endsWith(':')) {\n      currentService = trimmed.slice(0, -1);\n      result.services[currentService] = {};\n    } else if (currentService && indent === currentIndent + 4) {\n      const [key, ...valueParts] = trimmed.split(':');\n      const value = valueParts.join(':').trim();\n      result.services[currentService][key] = value;\n    }\n  }\n  \n  return result;\n}\n\nexport interface ComposeService {\n  name: string;\n  image?: string;\n  build?: string;\n  estimatedSize: string;\n  estimatedMemory: string;\n  estimatedCPU: string;\n  replicas: number;\n  resourceLimits?: {\n    cpus?: string;\n    memory?: string;\n  };\n}\n\nexport interface ComposeAnalysis {\n  composeFile: string;\n  services: ComposeService[];\n  totalEstimatedSize: string;\n  totalEstimatedMemory: string;\n  totalEstimatedCPU: string;\n  sustainabilityScore: number;\n  recommendations: string[];\n}\n\nexport class ComposeAnalyzer {\n  private projectPath: string;\n  \n  // Base image size estimates (in MB)\n  private readonly imageEstimates: Record<string, { size: number; memory: number; cpu: number }> = {\n    'alpine': { size: 5, memory: 4, cpu: 0.1 },\n    'busybox': { size: 1, memory: 2, cpu: 0.05 },\n    'ubuntu': { size: 77, memory: 64, cpu: 0.2 },\n    'debian': { size: 124, memory: 64, cpu: 0.2 },\n    'centos': { size: 204, memory: 128, cpu: 0.3 },\n    'node': { size: 900, memory: 512, cpu: 0.5 },\n    'node:alpine': { size: 110, memory: 256, cpu: 0.3 },\n    'python': { size: 885, memory: 512, cpu: 0.5 },\n    'python:alpine': { size: 45, memory: 128, cpu: 0.2 },\n    'nginx': { size: 142, memory: 128, cpu: 0.2 },\n    'nginx:alpine': { size: 23, memory: 64, cpu: 0.1 },\n    'redis': { size: 117, memory: 256, cpu: 0.3 },\n    'redis:alpine': { size: 32, memory: 128, cpu: 0.2 },\n    'postgres': { size: 379, memory: 512, cpu: 0.5 },\n    'postgres:alpine': { size: 160, memory: 256, cpu: 0.4 },\n    'mysql': { size: 544, memory: 512, cpu: 0.5 },\n    'mongo': { size: 493, memory: 1024, cpu: 0.6 },\n    'rabbitmq': { size: 220, memory: 512, cpu: 0.4 },\n    'elasticsearch': { size: 774, memory: 2048, cpu: 1.0 },\n    'default': { size: 500, memory: 512, cpu: 0.5 }\n  };\n\n  constructor(projectPath?: string) {\n    // Use current working directory if no path provided\n    this.projectPath = projectPath || process.cwd();\n  }\n\n  async analyze(): Promise<ComposeAnalysis[]> {\n    console.log(`Searching for Docker Compose files in: ${this.projectPath}`);\n    const composeFiles = await this.findComposeFilesRecursive();\n    const analyses: ComposeAnalysis[] = [];\n\n    for (const composeFile of composeFiles) {\n      const analysis = await this.analyzeComposeFile(composeFile);\n      analyses.push(analysis);\n    }\n\n    return analyses;\n  }\n\n  private async findComposeFilesRecursive(dir: string = this.projectPath): Promise<string[]> {\n    const composeFiles: string[] = [];\n    const possibleNames = [\n      'docker-compose.yml',\n      'docker-compose.yaml',\n      'compose.yml',\n      'compose.yaml',\n      'docker-compose.dev.yml',\n      'docker-compose.prod.yml',\n      'docker-compose.override.yml'\n    ];\n\n    // Directories to skip\n    const skipDirs = ['node_modules', '.git', 'dist', 'build', '.next', 'coverage', 'vendor'];\n\n    async function scanDirectory(currentDir: string, basePath: string): Promise<void> {\n      try {\n        const entries = await fs.readdir(currentDir, { withFileTypes: true });\n        \n        for (const entry of entries) {\n          const fullPath = join(currentDir, entry.name);\n          \n          if (entry.isDirectory()) {\n            // Skip certain directories\n            if (!skipDirs.includes(entry.name)) {\n              await scanDirectory(fullPath, basePath);\n            }\n          } else if (entry.isFile() && possibleNames.includes(entry.name)) {\n            // Store relative path from project root\n            const relativePath = fullPath.substring(basePath.length + 1);\n            composeFiles.push(relativePath);\n            console.log(`Found docker-compose file: ${relativePath}`);\n          }\n        }\n      } catch (error) {\n        // Ignore permission errors and continue\n      }\n    }\n\n    await scanDirectory(dir, this.projectPath);\n    \n    // Also check if we're in a subdirectory and should scan upwards\n    if (composeFiles.length === 0) {\n      // Try to find project root (look for package.json, .git, etc.)\n      const projectRoot = await this.findProjectRoot();\n      if (projectRoot && projectRoot !== this.projectPath) {\n        this.projectPath = projectRoot;\n        await scanDirectory(projectRoot, projectRoot);\n      }\n    }\n\n    return composeFiles;\n  }\n\n  private async findProjectRoot(startPath: string = this.projectPath): Promise<string | null> {\n    let currentPath = resolve(startPath);\n    const indicators = ['package.json', '.git', 'pnpm-workspace.yaml', '.gitignore'];\n    \n    // Keep going up until we find a project root indicator\n    while (currentPath !== '/' && currentPath !== resolve(currentPath, '..')) {\n      for (const indicator of indicators) {\n        try {\n          await fs.access(join(currentPath, indicator));\n          console.log(`Found project root at: ${currentPath}`);\n          return currentPath;\n        } catch {}\n      }\n      \n      // Move up one directory\n      currentPath = resolve(currentPath, '..');\n    }\n    \n    return null;\n  }\n\n  private async analyzeComposeFile(filename: string): Promise<ComposeAnalysis> {\n    const filePath = filename.startsWith('/') ? filename : join(this.projectPath, filename);\n    const content = await fs.readFile(filePath, 'utf8');\n    \n    // Use simple parser for now\n    // In production, you would import js-yaml at the top of the file\n    const compose = parseSimpleYaml(content);\n\n    const services: ComposeService[] = [];\n    let totalSize = 0;\n    let totalMemory = 0;\n    let totalCPU = 0;\n\n    if (compose.services) {\n      for (const [serviceName, serviceConfig] of Object.entries(compose.services)) {\n        const service = await this.analyzeService(serviceName, serviceConfig as any);\n        services.push(service);\n        \n        // Parse sizes to calculate totals\n        totalSize += parseFloat(service.estimatedSize);\n        totalMemory += parseFloat(service.estimatedMemory);\n        totalCPU += parseFloat(service.estimatedCPU);\n      }\n    }\n\n    const recommendations = this.generateRecommendations(services);\n    const sustainabilityScore = this.calculateSustainabilityScore(services);\n\n    return {\n      composeFile: filename,\n      services,\n      totalEstimatedSize: `${totalSize.toFixed(1)} MB`,\n      totalEstimatedMemory: `${totalMemory.toFixed(0)} MB`,\n      totalEstimatedCPU: `${totalCPU.toFixed(2)} cores`,\n      sustainabilityScore,\n      recommendations\n    };\n  }\n\n  private async analyzeService(name: string, config: any): Promise<ComposeService> {\n    let estimates = this.imageEstimates.default;\n    \n    if (config.image) {\n      // Try to match image with our estimates\n      const imageName = config.image.split(':')[0];\n      const imageTag = config.image.includes(':') ? config.image : `${config.image}:latest`;\n      \n      // Find best match\n      for (const [key, value] of Object.entries(this.imageEstimates)) {\n        if (imageTag.includes(key)) {\n          estimates = value;\n          break;\n        }\n      }\n\n      // Check if we can get actual image size from Docker\n      try {\n        const { stdout } = await execAsync(`docker images ${config.image} --format \"{{.Size}}\"`);\n        if (stdout.trim()) {\n          // Parse Docker size (e.g., \"142MB\" -> 142)\n          const sizeMatch = stdout.trim().match(/(\\d+\\.?\\d*)\\s*(MB|GB|KB)/i);\n          if (sizeMatch) {\n            let size = parseFloat(sizeMatch[1]);\n            if (sizeMatch[2].toUpperCase() === 'GB') size *= 1024;\n            if (sizeMatch[2].toUpperCase() === 'KB') size /= 1024;\n            estimates = { ...estimates, size };\n          }\n        }\n      } catch {\n        // Image not pulled locally, use estimate\n      }\n    }\n\n    // Check for resource limits in deploy section\n    let resourceLimits;\n    if (config.deploy?.resources?.limits) {\n      resourceLimits = {\n        cpus: config.deploy.resources.limits.cpus,\n        memory: config.deploy.resources.limits.memory\n      };\n    }\n\n    // Calculate replicas\n    const replicas = config.deploy?.replicas || 1;\n\n    // Apply replica multiplier\n    const finalSize = estimates.size; // Size doesn't multiply with replicas\n    const finalMemory = estimates.memory * replicas;\n    const finalCPU = estimates.cpu * replicas;\n\n    return {\n      name,\n      image: config.image,\n      build: config.build?.context || config.build,\n      estimatedSize: `${finalSize} MB`,\n      estimatedMemory: `${finalMemory} MB`,\n      estimatedCPU: `${finalCPU}`,\n      replicas,\n      resourceLimits\n    };\n  }\n\n  private generateRecommendations(services: ComposeService[]): string[] {\n    const recommendations: string[] = [];\n\n    for (const service of services) {\n      // Check for Alpine variants\n      if (service.image && !service.image.includes('alpine') && !service.image.includes('slim')) {\n        const hasAlpineVariant = ['node', 'python', 'nginx', 'redis', 'postgres'].some(\n          img => service.image?.includes(img)\n        );\n        if (hasAlpineVariant) {\n          recommendations.push(\n            `Consider using Alpine variant for ${service.name} to reduce size by ~80%`\n          );\n        }\n      }\n\n      // Check for missing resource limits\n      if (!service.resourceLimits) {\n        recommendations.push(\n          `Set resource limits for ${service.name} to prevent overconsumption`\n        );\n      }\n\n      // Check for high memory services\n      const memory = parseFloat(service.estimatedMemory);\n      if (memory > 1024) {\n        recommendations.push(\n          `Service ${service.name} uses high memory (${service.estimatedMemory}). Consider optimization.`\n        );\n      }\n    }\n\n    // General recommendations\n    if (services.length > 5) {\n      recommendations.push(\n        'Consider consolidating services where possible to reduce overhead'\n      );\n    }\n\n    return recommendations;\n  }\n\n  private calculateSustainabilityScore(services: ComposeService[]): number {\n    let score = 100;\n\n    for (const service of services) {\n      // Penalize large images\n      const size = parseFloat(service.estimatedSize);\n      if (size > 500) score -= 5;\n      if (size > 1000) score -= 10;\n\n      // Reward Alpine/slim variants\n      if (service.image?.includes('alpine') || service.image?.includes('slim')) {\n        score += 5;\n      }\n\n      // Reward resource limits\n      if (service.resourceLimits) {\n        score += 3;\n      }\n\n      // Penalize high memory usage\n      const memory = parseFloat(service.estimatedMemory);\n      if (memory > 2048) score -= 10;\n    }\n\n    return Math.max(0, Math.min(100, score));\n  }\n}","import { promises as fs } from 'fs';\nimport { join, extname } from 'path';\nimport { execSync } from 'child_process';\n\ninterface SecurityIssue {\n  type: string;\n  severity: 'high' | 'medium' | 'low';\n  file: string;\n  line?: number;\n  message: string;\n}\n\ninterface CodeComplexity {\n  file: string;\n  complexity: number;\n  lines: number;\n  functions: number;\n  issues: string[];\n}\n\ninterface SanityIssue {\n  type: string;\n  file: string;\n  message: string;\n}\n\nexport interface ProjectAnalysis {\n  projectPath: string;\n  security: {\n    score: number;\n    issues: SecurityIssue[];\n    recommendations: string[];\n    analysisTime?: number;\n    error?: string;\n  };\n  sanity: {\n    score: number;\n    issues: SanityIssue[];\n    recommendations: string[];\n    analysisTime?: number;\n    error?: string;\n  };\n  codeQuality: {\n    score: number;\n    complexFiles: CodeComplexity[];\n    recommendations: string[];\n    analysisTime?: number;\n    error?: string;\n  };\n  overall: {\n    score: number;\n    summary: string;\n  };\n}\n\nexport class ProjectAnalyzer {\n  private projectPath: string;\n  private skipDirs = ['node_modules', '.git', 'dist', 'build', 'coverage', '.next', 'vendor'];\n  private maxFileSize = 10 * 1024 * 1024; // 10MB max file size\n  private timeout = 30000; // 30 second timeout\n  \n  constructor(projectPath?: string) {\n    this.projectPath = projectPath || process.cwd();\n  }\n\n  async analyze(options?: { security?: boolean; sanity?: boolean; quality?: boolean }): Promise<ProjectAnalysis> {\n    const runAll = !options || (!options.security && !options.sanity && !options.quality);\n    \n    const analysis: ProjectAnalysis = {\n      projectPath: this.projectPath,\n      security: { score: 100, issues: [], recommendations: [] },\n      sanity: { score: 100, issues: [], recommendations: [] },\n      codeQuality: { score: 100, complexFiles: [], recommendations: [] },\n      overall: { score: 100, summary: '' }\n    };\n\n    // Validate project path first\n    if (!await this.validateProjectPath()) {\n      throw new Error(`Invalid project path: ${this.projectPath}`);\n    }\n\n    const analysisPromises: Promise<void>[] = [];\n\n    if (runAll || options?.security) {\n      analysisPromises.push(this.runSecurityAnalysis(analysis));\n    }\n\n    if (runAll || options?.sanity) {\n      analysisPromises.push(this.runSanityAnalysis(analysis));\n    }\n\n    if (runAll || options?.quality) {\n      analysisPromises.push(this.runQualityAnalysis(analysis));\n    }\n\n    // Run all analyses in parallel but handle individual failures\n    await Promise.allSettled(analysisPromises);\n\n    // Calculate overall score (only from successful analyses)\n    this.calculateOverallScore(analysis);\n\n    return analysis;\n  }\n\n  private async validateProjectPath(): Promise<boolean> {\n    try {\n      const stats = await fs.stat(this.projectPath);\n      return stats.isDirectory();\n    } catch (error) {\n      return false;\n    }\n  }\n\n  private async runSecurityAnalysis(analysis: ProjectAnalysis): Promise<void> {\n    const startTime = Date.now();\n    try {\n      analysis.security = await this.analyzeSecurityAsync();\n      analysis.security.analysisTime = Date.now() - startTime;\n    } catch (error) {\n      console.warn(`Security analysis failed: ${error.message}`);\n      analysis.security = {\n        score: 50,\n        issues: [],\n        recommendations: ['Manual security review needed due to analysis failure'],\n        analysisTime: Date.now() - startTime,\n        error: error.message\n      };\n    }\n  }\n\n  private async runSanityAnalysis(analysis: ProjectAnalysis): Promise<void> {\n    const startTime = Date.now();\n    try {\n      analysis.sanity = await this.analyzeSanity();\n      analysis.sanity.analysisTime = Date.now() - startTime;\n    } catch (error) {\n      console.warn(`Sanity analysis failed: ${error.message}`);\n      analysis.sanity = {\n        score: 50,\n        issues: [],\n        recommendations: ['Manual project structure review needed due to analysis failure'],\n        analysisTime: Date.now() - startTime,\n        error: error.message\n      };\n    }\n  }\n\n  private async runQualityAnalysis(analysis: ProjectAnalysis): Promise<void> {\n    const startTime = Date.now();\n    try {\n      analysis.codeQuality = await this.analyzeCodeQuality();\n      analysis.codeQuality.analysisTime = Date.now() - startTime;\n    } catch (error) {\n      console.warn(`Code quality analysis failed: ${error.message}`);\n      analysis.codeQuality = {\n        score: 50,\n        complexFiles: [],\n        recommendations: ['Manual code review needed due to analysis failure'],\n        analysisTime: Date.now() - startTime,\n        error: error.message\n      };\n    }\n  }\n\n  private calculateOverallScore(analysis: ProjectAnalysis): void {\n    const validScores: number[] = [];\n    \n    if (!analysis.security.error) validScores.push(analysis.security.score);\n    if (!analysis.sanity.error) validScores.push(analysis.sanity.score);\n    if (!analysis.codeQuality.error) validScores.push(analysis.codeQuality.score);\n    \n    if (validScores.length === 0) {\n      analysis.overall.score = 0;\n      analysis.overall.summary = 'Analysis failed - manual review required';\n      return;\n    }\n    \n    analysis.overall.score = Math.round(validScores.reduce((a, b) => a + b, 0) / validScores.length);\n    analysis.overall.summary = this.generateSummary(analysis);\n  }\n\n  private async analyzeSecurityAsync(): Promise<ProjectAnalysis['security']> {\n    const issues: SecurityIssue[] = [];\n    \n    try {\n      const files = await this.getAllFiles();\n      \n      // Process files in batches to avoid memory issues\n      const batchSize = 10;\n      for (let i = 0; i < files.length; i += batchSize) {\n        const batch = files.slice(i, i + batchSize);\n        await Promise.all(batch.map(file => this.analyzeFileForSecurity(file, issues)));\n      }\n\n      // Check for vulnerable dependencies with timeout\n      await this.checkVulnerableDependencies(issues);\n\n    } catch (error) {\n      throw new Error(`Security analysis failed: ${error.message}`);\n    }\n\n    const score = Math.max(0, 100 - (issues.filter(i => i.severity === 'high').length * 20) - \n                                    (issues.filter(i => i.severity === 'medium').length * 10));\n\n    const recommendations = this.generateSecurityRecommendations(issues);\n\n    return { score, issues, recommendations };\n  }\n\n  private async analyzeFileForSecurity(file: string, issues: SecurityIssue[]): Promise<void> {\n    try {\n      // Check file size before reading\n      const stats = await fs.stat(file);\n      if (stats.size > this.maxFileSize) {\n        console.warn(`Skipping large file: ${file} (${(stats.size / 1024 / 1024).toFixed(2)}MB)`);\n        return;\n      }\n\n      const content = await fs.readFile(file, 'utf8');\n      \n      // Check for hardcoded secrets\n      const secretPatterns = [\n        { pattern: /api[_-]?key\\s*[:=]\\s*[\"'][^\"']+[\"']/gi, type: 'hardcoded-api-key' },\n        { pattern: /password\\s*[:=]\\s*[\"'][^\"']+[\"']/gi, type: 'hardcoded-password' },\n        { pattern: /secret\\s*[:=]\\s*[\"'][^\"']+[\"']/gi, type: 'hardcoded-secret' },\n        { pattern: /token\\s*[:=]\\s*[\"'][^\"']+[\"']/gi, type: 'hardcoded-token' },\n        { pattern: /aws_access_key_id/gi, type: 'aws-credentials' },\n        { pattern: /private[_-]?key/gi, type: 'private-key' }\n      ];\n\n      const lines = content.split('\\n');\n      lines.forEach((line, index) => {\n        for (const { pattern, type } of secretPatterns) {\n          if (pattern.test(line) && !line.includes('process.env') && !line.includes('example')) {\n            issues.push({\n              type,\n              severity: 'high',\n              file: file.replace(this.projectPath + '/', ''),\n              line: index + 1,\n              message: `Potential ${type.replace('-', ' ')} found`\n            });\n          }\n        }\n      });\n\n      // Check for unsafe practices\n      if (file.endsWith('.js') || file.endsWith('.ts')) {\n        this.checkUnsafePractices(file, content, issues);\n      }\n\n    } catch (error) {\n      console.warn(`Failed to analyze file ${file}: ${error.message}`);\n    }\n  }\n\n  private checkUnsafePractices(file: string, content: string, issues: SecurityIssue[]): void {\n    if (content.includes('eval(')) {\n      issues.push({\n        type: 'unsafe-eval',\n        severity: 'high',\n        file: file.replace(this.projectPath + '/', ''),\n        message: 'Use of eval() is a security risk'\n      });\n    }\n\n    if (content.includes('innerHTML')) {\n      issues.push({\n        type: 'unsafe-html',\n        severity: 'medium',\n        file: file.replace(this.projectPath + '/', ''),\n        message: 'innerHTML can lead to XSS vulnerabilities'\n      });\n    }\n\n    if (content.match(/require\\s*\\([`'\"]\\s*\\$\\{/)) {\n      issues.push({\n        type: 'dynamic-require',\n        severity: 'medium',\n        file: file.replace(this.projectPath + '/', ''),\n        message: 'Dynamic require() can be a security risk'\n      });\n    }\n  }\n\n  private async checkVulnerableDependencies(issues: SecurityIssue[]): Promise<void> {\n    const packageJsonPath = join(this.projectPath, 'package.json');\n    if (!(await this.fileExists(packageJsonPath))) {\n      return;\n    }\n\n    try {\n      // Use timeout for npm audit\n      const timeoutPromise = new Promise((_, reject) => {\n        setTimeout(() => reject(new Error('npm audit timeout')), this.timeout);\n      });\n\n      const auditPromise = new Promise((resolve) => {\n        try {\n          execSync('npm audit --json', { cwd: this.projectPath, stdio: 'pipe' });\n          resolve(null);\n        } catch (e: any) {\n          const output = e.stdout?.toString() || '';\n          resolve(output);\n        }\n      });\n\n      const output = await Promise.race([auditPromise, timeoutPromise]) as string | null;\n\n      if (output) {\n        try {\n          const audit = JSON.parse(output);\n          if (audit.metadata?.vulnerabilities) {\n            const vulns = audit.metadata.vulnerabilities;\n            if (vulns.high > 0) {\n              issues.push({\n                type: 'vulnerable-dependencies',\n                severity: 'high',\n                file: 'package.json',\n                message: `${vulns.high} high severity vulnerabilities in dependencies`\n              });\n            }\n            if (vulns.moderate > 0) {\n              issues.push({\n                type: 'vulnerable-dependencies',\n                severity: 'medium',\n                file: 'package.json',\n                message: `${vulns.moderate} moderate severity vulnerabilities in dependencies`\n              });\n            }\n          }\n        } catch (parseError) {\n          console.warn('Failed to parse npm audit output');\n        }\n      }\n    } catch (error) {\n      console.warn(`npm audit failed: ${error.message}`);\n    }\n  }\n\n  private async analyzeSanity(): Promise<ProjectAnalysis['sanity']> {\n    const issues: SanityIssue[] = [];\n    \n    try {\n      // Check for README\n      if (!await this.fileExists(join(this.projectPath, 'README.md'))) {\n        issues.push({\n          type: 'missing-readme',\n          file: 'README.md',\n          message: 'No README.md file found'\n        });\n      }\n\n      // Check for .gitignore\n      if (!await this.fileExists(join(this.projectPath, '.gitignore'))) {\n        issues.push({\n          type: 'missing-gitignore',\n          file: '.gitignore',\n          message: 'No .gitignore file found'\n        });\n      }\n\n      // Check package.json\n      await this.checkPackageJson(issues);\n\n      // Check for tests\n      const hasTests = await this.hasTestFiles();\n      if (!hasTests) {\n        issues.push({\n          type: 'no-tests',\n          file: 'project',\n          message: 'No test files found in the project'\n        });\n      }\n\n      // Check for environment example\n      if (await this.fileExists(join(this.projectPath, '.env'))) {\n        if (!await this.fileExists(join(this.projectPath, '.env.example'))) {\n          issues.push({\n            type: 'missing-env-example',\n            file: '.env.example',\n            message: 'Found .env but no .env.example file'\n          });\n        }\n      }\n\n      // Check for large files\n      await this.checkLargeFiles(issues);\n\n    } catch (error) {\n      throw new Error(`Sanity analysis failed: ${error.message}`);\n    }\n\n    const score = Math.max(0, 100 - (issues.length * 10));\n    const recommendations = this.generateSanityRecommendations(issues);\n\n    return { score, issues, recommendations };\n  }\n\n  private async checkPackageJson(issues: SanityIssue[]): Promise<void> {\n    const packageJsonPath = join(this.projectPath, 'package.json');\n    if (!(await this.fileExists(packageJsonPath))) {\n      return;\n    }\n\n    try {\n      const packageJson = JSON.parse(await fs.readFile(packageJsonPath, 'utf8'));\n      \n      if (!packageJson.name) {\n        issues.push({\n          type: 'package-json-incomplete',\n          file: 'package.json',\n          message: 'Missing \"name\" field in package.json'\n        });\n      }\n\n      if (!packageJson.version) {\n        issues.push({\n          type: 'package-json-incomplete',\n          file: 'package.json',\n          message: 'Missing \"version\" field in package.json'\n        });\n      }\n\n      if (!packageJson.description) {\n        issues.push({\n          type: 'package-json-incomplete',\n          file: 'package.json',\n          message: 'Missing \"description\" field in package.json'\n        });\n      }\n\n      if (!packageJson.scripts || Object.keys(packageJson.scripts).length === 0) {\n        issues.push({\n          type: 'no-scripts',\n          file: 'package.json',\n          message: 'No scripts defined in package.json'\n        });\n      }\n    } catch (error) {\n      issues.push({\n        type: 'invalid-package-json',\n        file: 'package.json',\n        message: 'Invalid or corrupted package.json file'\n      });\n    }\n  }\n\n  private async checkLargeFiles(issues: SanityIssue[]): Promise<void> {\n    try {\n      const files = await this.getAllFiles();\n      for (const file of files) {\n        try {\n          const stats = await fs.stat(file);\n          if (stats.size > 1024 * 1024 * 10) { // 10MB\n            issues.push({\n              type: 'large-file',\n              file: file.replace(this.projectPath + '/', ''),\n              message: `File is very large (${(stats.size / 1024 / 1024).toFixed(2)}MB)`\n            });\n          }\n        } catch (error) {\n          // Skip files we can't stat\n          continue;\n        }\n      }\n    } catch (error) {\n      console.warn(`Failed to check file sizes: ${error.message}`);\n    }\n  }\n\n  private async analyzeCodeQuality(): Promise<ProjectAnalysis['codeQuality']> {\n    const complexFiles: CodeComplexity[] = [];\n    \n    try {\n      const files = await this.getAllCodeFiles();\n\n      // Process files in batches\n      const batchSize = 5;\n      for (let i = 0; i < files.length; i += batchSize) {\n        const batch = files.slice(i, i + batchSize);\n        const batchResults = await Promise.allSettled(\n          batch.map(file => this.analyzeFileComplexitySafe(file))\n        );\n        \n        batchResults.forEach((result, index) => {\n          if (result.status === 'fulfilled' && result.value) {\n            const analysis = result.value;\n            if (analysis.complexity > 10 || analysis.issues.length > 0) {\n              complexFiles.push(analysis);\n            }\n          } else if (result.status === 'rejected') {\n            console.warn(`Failed to analyze ${batch[index]}: ${result.reason}`);\n          }\n        });\n      }\n\n      // Sort by complexity\n      complexFiles.sort((a, b) => b.complexity - a.complexity);\n\n    } catch (error) {\n      throw new Error(`Code quality analysis failed: ${error.message}`);\n    }\n\n    let score = 100;\n    complexFiles.forEach(file => {\n      if (file.complexity > 20) score -= 10;\n      else if (file.complexity > 15) score -= 5;\n      else if (file.complexity > 10) score -= 2;\n    });\n\n    const recommendations = this.generateQualityRecommendations(complexFiles);\n\n    return {\n      score: Math.max(0, score),\n      complexFiles: complexFiles.slice(0, 10), // Top 10 most complex\n      recommendations\n    };\n  }\n\n  private async analyzeFileComplexitySafe(filePath: string): Promise<CodeComplexity | null> {\n    try {\n      // Check file size before reading\n      const stats = await fs.stat(filePath);\n      if (stats.size > this.maxFileSize) {\n        console.warn(`Skipping large file for complexity analysis: ${filePath}`);\n        return null;\n      }\n\n      const content = await fs.readFile(filePath, 'utf8');\n      return this.analyzeFileComplexity(filePath, content);\n    } catch (error) {\n      throw new Error(`Failed to analyze file complexity for ${filePath}: ${error.message}`);\n    }\n  }\n\n  private analyzeFileComplexity(filePath: string, content: string): CodeComplexity {\n    const lines = content.split('\\n');\n    const issues: string[] = [];\n    let complexity = 0;\n    let functionCount = 0;\n\n    // Count functions and complexity\n    const functionPattern = /function\\s+\\w+|const\\s+\\w+\\s*=\\s*\\(|=>\\s*{|class\\s+\\w+/g;\n    const complexityPatterns = [\n      { pattern: /if\\s*\\(/, weight: 1 },\n      { pattern: /else\\s+if/, weight: 1 },\n      { pattern: /for\\s*\\(/, weight: 1 },\n      { pattern: /while\\s*\\(/, weight: 1 },\n      { pattern: /switch\\s*\\(/, weight: 2 },\n      { pattern: /catch\\s*\\(/, weight: 1 },\n      { pattern: /\\?\\s*.*\\s*:/, weight: 1 }, // ternary\n    ];\n\n    functionCount = (content.match(functionPattern) || []).length;\n\n    lines.forEach((line, index) => {\n      // Check line length\n      if (line.length > 120) {\n        issues.push(`Line ${index + 1} is too long (${line.length} chars)`);\n      }\n\n      // Calculate complexity\n      for (const { pattern, weight } of complexityPatterns) {\n        if (pattern.test(line)) {\n          complexity += weight;\n        }\n      }\n\n      // Check for deeply nested code (rough approximation)\n      const indentLevel = line.match(/^(\\s*)/)?.[1].length || 0;\n      if (indentLevel > 16) { // 4 levels of indentation\n        complexity += 1;\n        if (!issues.some(i => i.includes('deeply nested'))) {\n          issues.push('Contains deeply nested code');\n        }\n      }\n    });\n\n    // Check for spaghetti code indicators\n    if (lines.length > 500) {\n      issues.push(`File is very long (${lines.length} lines)`);\n      complexity += 5;\n    }\n\n    if (functionCount > 20) {\n      issues.push(`Too many functions in one file (${functionCount})`);\n      complexity += 3;\n    }\n\n    // Check for callback hell\n    const callbackHellPattern = /}\\s*\\)\\s*}\\s*\\)\\s*}/;\n    if (callbackHellPattern.test(content)) {\n      issues.push('Possible callback hell detected');\n      complexity += 5;\n    }\n\n    return {\n      file: filePath.replace(this.projectPath + '/', ''),\n      complexity,\n      lines: lines.length,\n      functions: functionCount,\n      issues\n    };\n  }\n\n  private async getAllFiles(dir: string = this.projectPath): Promise<string[]> {\n    const files: string[] = [];\n    const self = this;\n    \n    async function scan(currentDir: string): Promise<void> {\n      try {\n        const entries = await fs.readdir(currentDir, { withFileTypes: true });\n        \n        for (const entry of entries) {\n          const fullPath = join(currentDir, entry.name);\n          \n          if (entry.isDirectory() && !self.skipDirs.includes(entry.name)) {\n            await scan(fullPath);\n          } else if (entry.isFile()) {\n            files.push(fullPath);\n          }\n        }\n      } catch (error) {\n        // Skip directories we can't read\n        console.warn(`Cannot read directory ${currentDir}: ${error.message}`);\n      }\n    }\n\n    await scan(dir);\n    return files;\n  }\n\n  private async getAllCodeFiles(): Promise<string[]> {\n    const files = await this.getAllFiles();\n    const codeExtensions = ['.js', '.ts', '.jsx', '.tsx', '.mjs', '.cjs'];\n    return files.filter(file => codeExtensions.includes(extname(file)));\n  }\n\n  private async hasTestFiles(): Promise<boolean> {\n    try {\n      const files = await this.getAllFiles();\n      return files.some(file => \n        file.includes('test') || \n        file.includes('spec') || \n        file.includes('__tests__') ||\n        file.endsWith('.test.js') ||\n        file.endsWith('.spec.js') ||\n        file.endsWith('.test.ts') ||\n        file.endsWith('.spec.ts')\n      );\n    } catch (error) {\n      console.warn(`Failed to check for test files: ${error.message}`);\n      return false;\n    }\n  }\n\n  private async fileExists(path: string): Promise<boolean> {\n    try {\n      await fs.access(path);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  private generateSecurityRecommendations(issues: SecurityIssue[]): string[] {\n    const recommendations: string[] = [];\n    \n    if (issues.some(i => i.type.includes('hardcoded'))) {\n      recommendations.push('Use environment variables for sensitive data');\n      recommendations.push('Add .env to .gitignore and create .env.example');\n    }\n\n    if (issues.some(i => i.type === 'unsafe-eval')) {\n      recommendations.push('Replace eval() with safer alternatives like JSON.parse()');\n    }\n\n    if (issues.some(i => i.type === 'unsafe-html')) {\n      recommendations.push('Use textContent instead of innerHTML or sanitize input');\n    }\n\n    if (issues.some(i => i.type === 'vulnerable-dependencies')) {\n      recommendations.push('Run \"npm audit fix\" to update vulnerable dependencies');\n    }\n\n    return recommendations;\n  }\n\n  private generateSanityRecommendations(issues: SanityIssue[]): string[] {\n    const recommendations: string[] = [];\n    \n    if (issues.some(i => i.type === 'missing-readme')) {\n      recommendations.push('Create a README.md with project description and usage');\n    }\n\n    if (issues.some(i => i.type === 'no-tests')) {\n      recommendations.push('Add unit tests to improve code reliability');\n    }\n\n    if (issues.some(i => i.type === 'large-file')) {\n      recommendations.push('Consider using Git LFS for large files');\n    }\n\n    if (issues.some(i => i.type === 'missing-gitignore')) {\n      recommendations.push('Add .gitignore to exclude build files and dependencies');\n    }\n\n    return recommendations;\n  }\n\n  private generateQualityRecommendations(complexFiles: CodeComplexity[]): string[] {\n    const recommendations: string[] = [];\n    \n    if (complexFiles.some(f => f.complexity > 20)) {\n      recommendations.push('Refactor complex functions into smaller, focused functions');\n    }\n\n    if (complexFiles.some(f => f.lines > 300)) {\n      recommendations.push('Split large files into smaller, more manageable modules');\n    }\n\n    if (complexFiles.some(f => f.issues.some(i => i.includes('callback hell')))) {\n      recommendations.push('Use async/await instead of nested callbacks');\n    }\n\n    if (complexFiles.some(f => f.functions > 15)) {\n      recommendations.push('Consider splitting files with many functions into separate modules');\n    }\n\n    return recommendations;\n  }\n\n  private generateSummary(analysis: ProjectAnalysis): string {\n    const { overall } = analysis;\n    \n    if (overall.score >= 90) {\n      return 'Excellent! Your project follows best practices for sustainability and quality.';\n    } else if (overall.score >= 70) {\n      return 'Good project health with some areas for improvement.';\n    } else if (overall.score >= 50) {\n      return 'Several issues found that should be addressed for better sustainability.';\n    } else {\n      return 'Critical issues detected. Immediate attention required for project health.';\n    }\n  }\n}"],"mappings":"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","names":["join","exec","promisify","execAsync","fs","join","resolve","_a","output","path"]}